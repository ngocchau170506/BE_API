import express, { Request, Response, Router } from 'express';
import { OpenAPIRegistry, extendZodWithOpenApi } from '@asteasolutions/zod-to-openapi';
import { StatusCodes } from 'http-status-codes';
import { RegisterRequestSchema, RegisterResponseSchema } from './auth.dto';
import { authService } from './auth.service';
import { ServiceResponse, ResponseStatus } from '@/common';
import { createApiResponse } from '@/swagger/openAPIResponseBuilders';
import { z } from 'zod';
// express ‚Üí framework backend (d√πng ƒë·ªÉ t·∫°o API).
// zod ‚Üí th∆∞ vi·ªán validate d·ªØ li·ªáu (check email h·ª£p l·ªá, m·∫≠t kh·∫©u ‚â• 8 k√Ω t·ª±‚Ä¶).
// @asteasolutions/zod-to-openapi ‚Üí d√πng ƒë·ªÉ chuy·ªÉn schema c·ªßa Zod th√†nh t√†i li·ªáu Swagger/OpenAPI.
// http-status-codes ‚Üí thay v√¨ nh·ªõ s·ªë 400, 401, 201, ‚Ä¶ th√¨ d√πng StatusCodes.BAD_REQUEST cho r√µ nghƒ©a.
// ServiceResponse, ResponseStatus ‚Üí c·∫•u tr√∫c chu·∫©n ƒë·ªÉ tr·∫£ v·ªÅ d·ªØ li·ªáu (do b·∫°n ho·∫∑c team ƒë·ªãnh nghƒ©a trong @/common).
// createApiResponse ‚Üí helper ƒë·ªÉ ƒë·ªãnh nghƒ©a response cho Swagger.

// ƒê·∫£m b·∫£o m·ªü r·ªông Zod tr∆∞·ªõc khi ƒëƒÉng k√Ω schema
extendZodWithOpenApi(z);

export const authRegistry = new OpenAPIRegistry();

// üëâ ƒê√¢y l√† ch·ªó ƒëƒÉng k√Ω schema v·ªõi Swagger ƒë·ªÉ t·ª± sinh t√†i li·ªáu API.
authRegistry.register('RegisterRequest', RegisterRequestSchema);
authRegistry.register('RegisterResponse', RegisterResponseSchema);

authRegistry.registerPath({
  method: 'post',
  path: '/auth/register',
  tags: ['Auth'],
  request: {
    body: {
      content: {
        'application/json': { schema: RegisterRequestSchema },
      },
    },
  },
  responses: {
    ...createApiResponse(RegisterResponseSchema, 'ƒêƒÉng k√Ω th√†nh c√¥ng', StatusCodes.CREATED),
    //Request body ph·∫£i theo RegisterRequestSchema (email, password, confirmPassword).
    ...createApiResponse(z.null(), 'Email ƒë√£ t·ªìn t·∫°i', StatusCodes.CONFLICT),
    ...createApiResponse(z.null(), 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá', StatusCodes.BAD_REQUEST),
  },
});

export const authRouter: Router = (() => {
  const router = express.Router();

  router.post('/register', async (req: Request, res: Response) => {
    const parsed = RegisterRequestSchema.safeParse(req.body);
    if (!parsed.success) {
      return res.status(StatusCodes.BAD_REQUEST).json(
        new ServiceResponse(
          ResponseStatus.Failed,
          'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          { errors: parsed.error.flatten() },
          StatusCodes.BAD_REQUEST
        )
      );
    }
    const serviceResponse = await authService.register(parsed.data);
    return res.status(serviceResponse.code).json(serviceResponse);
  });

  return router;
})();
